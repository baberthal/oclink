#!/usr/bin/env ruby

require 'colorize'
require 'open3'
require 'optparse'

class JMLRunner
  class TCase # rubocop:disable Metrics/ClassLength
    attr_reader :name
    attr_accessor :cmd, :env
    def initialize(name, options = {})
      @name = name
      @env = options[:env]
      @log_file = options[:log_file]
      @failures = []
      @errors = []
      @test_stderr = StringIO.new
      @other_messages = StringIO.new
    end

    def run # rubocop:disable Metrics/AbcSize
      start_message
      Open3.popen3(@env, @name) do |_, sout, serr, _|
        while (line = sout.gets) do conditional_puts(line) end
        while (line_err = serr.gets) do @test_stderr.puts(line_err) end
      end
      print_unhandled_output
      $stdout.puts nil, 'STDERR:'.colorize(:green).bold, @test_stderr.string
      @log_file.puts nil, 'OTHER MESSAGES:'.colorize(:white).bold,
                     @other_messages.string
    end

    private

    def term_width
      result = if ENV['COLUMNS']
                 ENV['COLUMNS'].to_i
               else
                 unix? ? dynamic_width : 80
               end
      result < 10 ? 80 : result
    rescue
      80
    end

    def unix?
      RUBY_PLATFORM =~
        /(aix|darwin|linux|(net|free|open)bsd|cygwin|solaris|irix|hpux)/i
    end

    def dynamic_width
      @dynamic_width ||= (dynamic_width_stty.nonzero? || dynamic_width_tput)
    end

    # rubocop:disable Style/CommandLiteral
    def dynamic_width_stty
      %x(stty size 2>/dev/null).split[1].to_i
    end

    def dynamic_width_tput
      %x(tput cols 2>/dev/null).to_i
    end

    def start_message
      $stdout.puts '=' * term_width
      $stdout.puts "Running #{File.basename(@name)}".colorize(:yellow)
    end

    def summary_pattern
      # rubocop:disable Style/RegexpLiteral
      @summary_pattern ||= %r{
      (?<pass_pctg>\d+)%:(\s+)
      (Checks:(\s+))(?<n_checks>\d+)(.+)
      (Failures:(\s+))(?<n_failures>\d+)(.+)
      (Errors:(\s+))(?<n_errors>\d+)
      }x
      # rubocop:enable All
    end

    def line_type(line)
      case line
      when /Passed$/ then :pass
      when /(Checks)(.+)(Failures)(.+)(Errors)(.+)|Results/ then :summary
      when /:F:/i then :failure
      when /^\(null\):/ then :error
      else extra_line_types(line)
      end
    end

    def extra_line_types(line)
      case line
      when /^\[DEBUG/ then :debug_message
      when /^Running suite/ then :extraneous
      end
    end

    def conditional_puts(line)
      case line_type(line)
      when :pass then print '.'.colorize(:green)
      when :failure then handle_failure(line)
      when :error then handle_error(line)
      when :summary then generate_summary(line)
      when :debug_message then log_debug_message(line)
      else handle_extra(line)
      end
    end

    def handle_extra(line)
      @log_file.puts line
    end

    def log_debug_message(line)
      match = debug_message_pattern.match(line)
      return unless match
      @other_messages.puts format_debug_msg(match)
    end

    def debug_message_pattern
      @debug_message_pattern ||= %r{
      ^\[(?<type>[\w\s]+)\]\s*-\s*
      (?<return_type>\w+)?\s*(?<fn_name>\w+)?\(?((?<args>.+)?\))?\s*
      (\[(?<filename>[\w\.]+):(?<line>\d+)\])?\s*
      (?<message>.+)$
      }x
    end

    def format_debug_msg(match)
      msg = []
      msg << "[#{match[:type].red}] - [#{match[:filename]}:#{match[:line]}]"
      msg << extract_fn_from_debug(match)
      msg << match[:message].strip.white
      "#{msg.join("\n")}\n\n"
    end

    def extract_fn_from_debug(match) # rubocop:disable Metrics/AbcSize
      fn = "#{match[:return_type].to_s.yellow} #{match[:fn_name].to_s.blue}"
      arg_mapper = ->(arg) { arg.strip.gsub(/\w+/) { |m| m.to_s.yellow } }
      args = (match[:args] || '').split(',').map(&arg_mapper)
      fn << "(#{args.join(', ')})"
      fn
    end

    def generate_summary(line) # rubocop:disable Metrics/AbcSize
      match = summary_pattern.match(line)
      return unless match
      return if @summary
      @summary = "\n#{match[:pass_pctg]}% Passed ".colorize(:white).bold
      @summary << '('
      @summary << "#{match[:n_checks]} Checks, ".colorize(:green)
      @summary << "#{match[:n_failures]} Failures, ".colorize(:red)
      @summary << "#{match[:n_errors]} Errors".colorize(:yellow)
      @summary << ')'
    end

    def print_unhandled_output
      $stdout.puts @summary
      unless @failures.empty?
        $stdout.puts "\nFAILURES\n==========".colorize(:red).bold
        $stdout.puts @failures.join("\n\n")
        $stdout.puts "\nERRORS\n==========".colorize(:yellow).bold
        $stdout.puts @errors.join("\n\n")
      end
    end

    def handle_failure(line)
      $stdout.print 'F'.colorize(:red)
      match = failure_pattern.match(line)
      return line unless match
      @failures << colorize_fail_msg(match)
    end

    def handle_error(line)
      $stdout.print '*'.colorize(:yellow)
      @errors << line
    end

    def colorize_fail_msg(match) # rubocop:disable Metrics/AbcSize
      file = File.basename(match[:file])
      this = "#{file.to_s.colorize(:white)}:#{match[:line].to_s.blue}"
      this << "\nTest Case: #{match[:tcase].to_s.colorize(:yellow)}\n"
      this << "Function: #{match[:fn].to_s.colorize(:blue)}\n"
      this << 'Reason: '
      reason = "Expected #{match[:var]} to #{match[:op]} #{match[:expected]}, "
      reason << "got #{match[:reason]}"
      this << reason.colorize(:red)
      this
    end

    def failure_pattern
      @failure_pattern ||= %r{
      (?<file>\S+):
      (?<line>\d+):(?:\S):
      (?<tcase>[a-zA-Z]+):
      (?<fn>[a-zA-Z_]+):(?:[\d]):\s*(Assertion\s*)
      ('(?<var>\S+)?\s(?<op>\S+)\s?(?<expected>.+)'
      \s*(?:failed:)
      (?<reason>.+))
      }x
    end
  end

  attr_reader :file_path
  attr_reader :built_products
  attr_reader :log_file
  attr_accessor :env

  def initialize(argv)
    @argv = argv
    @options = {
      quiet: false,
      log_file: $stdout
    }

    parse!
    @env = {}
    check_env
    @env.merge!(ENV)
  end

  def parser
    @parser ||= OptionParser.new do |opts|
      opts.on('-q', '--quiet', 'Silence Logging') { |q| @options[:quiet] = q }
      opts.on('-lLOG_FILE', '--log-file=LOG_FILE', 'Set log file') do |log_file|
        @options[:log_file] = File.open(File.expand_path(log_file), 'w+')
      end
    end
  end

  def parse!
    parser.parse! @argv
    @file_path = File.expand_path(@argv.shift)
    raise ArgumentError, 'No such file/directory' unless File.exist?(@file_path)
    @other_args = @argv
    setup_run
  end

  def setup_run
    @built_products = Dir["#{File.expand_path(file_path)}/*"].select do |f|
      f =~ /(.+)_tests?$/
    end
  end

  def check_env
    verbosity = default_env('CK_VERBOSITY', 'normal')
    ck_log_file = default_env('CK_LOG_FILE_NAME', '-')
    @env['CK_VERBOSITY'] = verbosity
    @env['CK_LOG_FILE_NAME'] = ck_log_file
  end

  def default_env(env_var, default)
    return ENV[env_var] unless empty_env?(env_var)
    default
  end

  def empty_env?(env_var)
    ENV[env_var].nil? || ENV[env_var].empty?
  end

  def test_list
    message = ''
    @built_products.each { |p| message << "    #{File.basename(p)}\n" }
    message.colorize(:green)
  end

  def run
    puts 'Running Tests:'.colorize(:white).bold
    puts test_list
    @built_products.each { |p| run_one(p) }
    @log_file.close if @log_file.is_a? File
  end

  def run_one(test)
    TCase.new(test, env: @env, log_file: @options[:log_file]).run
  end
end

JMLRunner.new(ARGV).run
