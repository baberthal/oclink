#define CLINK_VERSION_MAJOR @PROJECT_VERSION_MAJOR@
#define CLINK_VERSION_MINOR @PROJECT_VERSION_MINOR@
#define CLINK_VERSION_PATCH @PROJECT_VERSION_PATCH@
#define CLINK_VERSION_STRING "@PROJECT_VERSION_MAJOR@.@PROJECT_VERSION_MINOR@.@PROJECT_VERSION_PATCH@"

#cmakedefine HAVE_UNISTD_H
#cmakedefine HAVE_STDLIB_H
#cmakedefine HAVE_STDINT_H
#cmakedefine HAVE_STDBOOL_H

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif

#ifdef HAVE_STDBOOL_H
#include <stdbool.h>
#endif

#define SLEEP(ms)             \
    do {                      \
        @CLINK_SLEEP_MACRO@; \
        sleep_total += ms;    \
    } while (0)

#if DEBUG
#define DEBUG_HID_READ(buf)                                                \
    do {                                                                   \
        fprintf(stdout, "[DEBUG READ] - %s [%s:%d] ", __PRETTY_FUNCTION__, \
                __FILENAME__, __LINE__);                                   \
        for (size_t _z = 0; _z < sizeof((buf)); _z++) {                    \
            if ((_z + 1) % 16 != 0) {                                      \
                fprintf(stdout, "%02X ", (buf)[_z]);                       \
            }                                                              \
            else {                                                         \
                fprintf(stdout, "%02X\n", (buf)[_z]);                      \
            }                                                              \
        }                                                                  \
        fprintf(stdout, "\n");                                             \
    } while (0)

#define DEBUG_HID_WRITE(buf)                                                \
    do {                                                                    \
        fprintf(stdout, "[DEBUG WRITE] - %s [%s:%d] ", __PRETTY_FUNCTION__, \
                __FILENAME__, __LINE__);                                    \
        for (size_t _z = 0; _z < sizeof((buf)); _z++) {                     \
            if ((_z + 1) % 16 != 0) {                                       \
                fprintf(stdout, "%02X ", (buf)[_z]);                        \
            }                                                               \
            else {                                                          \
                fprintf(stdout, "%02X\n", (buf)[_z]);                       \
            }                                                               \
        }                                                                   \
        fprintf(stdout, "\n");                                              \
    } while (0)
#else
#define DEBUG_HID_READ(buf)
#define DEBUG_HID_WRITE(buf)
#endif
